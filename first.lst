     1                                  
     2                                  
     3                                  ;
     4                                  ; file: first.asm
     5                                  ; First assembly program. This program asks for two integers as
     6                                  ; input and prints out their sum.
     7                                  ;
     8                                  ; To create executable:
     9                                  ; Using djgpp:
    10                                  ; nasm -f coff first.asm
    11                                  ; gcc -o first first.o driver.c asm_io.o
    12                                  ;
    13                                  ; Using Linux and gcc:
    14                                  ; nasm -f elf first.asm
    15                                  ; gcc -o first first.o driver.c asm_io.o
    16                                  ;
    17                                  ; Using Borland C/C++
    18                                  ; nasm -f obj first.asm
    19                                  ; bcc32 first.obj driver.c asm_io.obj
    20                                  ;
    21                                  ; Using MS C/C++
    22                                  ; nasm -f win32 first.asm
    23                                  ; cl first.obj driver.c asm_io.obj
    24                                  ;
    25                                  ; Using Open Watcom
    26                                  ; nasm -f obj first.asm
    27                                  ; wcl386 first.obj driver.c asm_io.obj
    28                                  
    29                                  %include "asm_io.inc"
    30                              <1> 	extern  read_int, print_int, print_string
    31                              <1> 	extern	read_char, print_char, print_nl
    32                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    33                              <1> 
    34                              <1> %macro 	dump_regs 1
    35                              <1> 	push	  dword %1
    36                              <1> 	call	  sub_dump_regs
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> 
    40                              <1> ;
    41                              <1> ; usage: dump_mem label, start-address, # paragraphs
    42                              <1> %macro  dump_mem 3
    43                              <1> 	push	 dword %1
    44                              <1> 	push	 dword %2
    45                              <1> 	push	 dword %3
    46                              <1> 	call	 sub_dump_mem
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro	dump_math 1
    50                              <1> 	push	 dword %1
    51                              <1> 	call	 sub_dump_math
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> %macro  dump_stack 3
    55                              <1> 	push	 dword %3
    56                              <1>         push     dword %2
    57                              <1> 	push	 dword %1
    58                              <1>         call     sub_dump_stack
    59                              <1> %endmacro
    60                                  ;
    61                                  ; initialized data is put in the .data segment
    62                                  ;
    63                                  segment .data
    64                                  ;
    65                                  ; These labels refer to strings used for output
    66                                  ;
    67 00000000 576861742076696369-     prompt1 db    "What vicious maneouver shal;l u choose?", 0Ah, 0       ; don't forget nul terminator
    68 00000009 6F7573206D616E656F-
    69 00000012 75766572207368616C-
    70 0000001B 3B6C20752063686F6F-
    71 00000024 73653F0A00         
    72 00000029 0931292050756E6368-     move1 db    09h, "1) Punch", 0Ah, 0
    73 00000032 0A00               
    74 00000034 093229204B69636B0A-     move2 db    09h, "2) Kick", 0Ah, 0
    75 0000003D 00                 
    76 0000003E 093329205061727279-     move3 db    09h, "3) Parry", 0Ah, 0
    77 00000047 0A00               
    78 00000049 09342920446F646765-     move4 db    09h, "4) Dodge", 0Ah, 0
    79 00000052 0A00               
    80 00000054 596F7520626C6F7720-     outcome1 db    "You blow your opponent with a Mighty PUNCH!", 0
    81 0000005D 796F7572206F70706F-
    82 00000066 6E656E742077697468-
    83 0000006F 2061204D6967687479-
    84 00000078 2050554E43482100   
    85 00000080 20596F7572206F7070-     outcome2 db    " Your opponent's defense are no match for your swift feet KICKs", 0
    86 00000089 6F6E656E7427732064-
    87 00000092 6566656E7365206172-
    88 0000009B 65206E6F206D617463-
    89 000000A4 6820666F7220796F75-
    90 000000AD 722073776966742066-
    91 000000B6 656574204B49434B73-
    92 000000BF 00                 
    93 000000C0 2C596F757220717569-     outcome3 db    ",Your quick and nimble hands PARRY the technique!", 0
    94 000000C9 636B20616E64206E69-
    95 000000D2 6D626C652068616E64-
    96 000000DB 732050415252592074-
    97 000000E4 686520746563686E69-
    98 000000ED 7175652100         
    99 000000F2 596F757220444F4447-     outcome4 db    "Your DODGE is effervescent!", 0
   100 000000FB 452069732065666665-
   101 00000104 7276657363656E7421-
   102 0000010D 00                 
   103                                  
   104                                  
   105                                  
   106                                  ;
   107                                  ; uninitialized data is put in the .bss segment
   108                                  ;
   109                                  segment .bss
   110                                  ;
   111                                  ; These labels refer to double words used to store the inputs
   112                                  ;
   113 00000000 <res 00000004>          input1  resd 1
   114 00000004 <res 00000004>          input2  resd 1
   115                                   
   116                                  
   117                                  ;
   118                                  ; code is put in the .text segment
   119                                  ;
   120                                  segment .text
   121                                          global  _asm_main
   122                                  _asm_main:
   123 00000000 C8000000                        enter   0,0               ; setup routine
   124 00000004 60                              pusha
   125                                  
   126 00000005 B8[00000000]                    mov     eax, prompt1      ; print out prompt
   127 0000000A E8(00000000)                    call    print_string
   128                                  		
   129 0000000F B8[29000000]            		mov     eax, move1      ; print out prompt
   130 00000014 E8(00000000)                    call    print_string
   131                                  		
   132 00000019 B8[34000000]            		mov     eax, move2      ; print out prompt
   133 0000001E E8(00000000)                    call    print_string
   134                                  		
   135 00000023 B8[3E000000]            		mov     eax, move3      ; print out prompt
   136 00000028 E8(00000000)                    call    print_string
   137                                  		
   138 0000002D B8[49000000]            		mov     eax, move4      ; print out prompt
   139 00000032 E8(00000000)                    call    print_string
   140                                  
   141 00000037 E8(00000000)                    call    read_int          ; read integer
   142 0000003C A3[00000000]                    mov     [input1], eax     ; store into input1
   143                                  		
   144 00000041 B8[54000000]            		mov		eax, outcome1
   145 00000046 E8(00000000)            		call	print_string
   146                                  
   147 0000004B 61                              popa
   148 0000004C B800000000                      mov     eax, 0            ; return back to C
   149 00000051 C9                              leave                     
   150 00000052 C3                              ret
   151                                  
   152                                  
